type list = Nil | Cons of int * list
in

(* Longueur d'une liste *)
let rec length = fun (l : list) =>
  let rec aux = fun (l : list) =>
    match l with
     | Nil => 0
     | Cons {x, xs} => 1 + aux xs
    end
  in aux l
in 

(* Concaténation de deux listes *)
let rec concat = fun (l : list) => fun l2 =>
  let rec aux = fun (l : list) =>
    match l with
     | Nil => l2
     | Cons {x, xs} => Cons {x, aux xs}
    end
  in aux l
in   

(* Crée une liste de contenant tous les entiers de "first" à "last" [croissant] *)
let rec create_from = fun (first : int) => fun last =>
  let rec loop = fun (i : int) => 
    ifz (last+1 - i) then Nil
    else Cons {i,(loop (i+1))}
  in loop first 
in

(* Crée une liste de contenant tous les entiers de "first" à "last" [décroissant]*)
let rec create_to = fun (last : int) => fun first =>
  let rec loop = fun (i : int) => 
    ifz (first-1 - i) then Nil
    else Cons {i,(loop (i-1))}
  in loop last 
in

(* Mappe une fonction sur une liste *)
let rec map = fun (l : list) => fun funct =>
  let rec loop = fun (l : list) =>
    match l with
     | Nil => Nil
     | Cons {x, xs} => Cons {(funct x), loop xs}
    end
  in loop l
in

(* Applique une fonction tour à tour à chaque élément d'une liste et sur un accumulateur. *)
let rec fold_left = fun (l : list) => fun funct => fun accu =>
  let rec loop = fun (l : list) => fun acc =>
    match l with
     | Nil => acc
     | Cons {x, xs} => loop xs (funct x acc)
    end
  in loop l accu
in

(* Algorithme de quicksort sur les listes chaînées. *)
let rec quicksort = fun (l : list) =>
  ifz (1 < (length l)) then l else
  let pivot = match l with | Nil => 0-1 | Cons {x, xs} => x  end in
  let l     = match l with | Nil => Nil | Cons {x, xs} => xs end in
  let rec loop = fun (l : list) => fun less => fun more => match l with
      | Nil 	    => (less, more)
      | Cons {x,xs} => ifz (pivot < x) then loop xs (Cons {x,less}) more else loop xs less (Cons {x, more})
      end 
  in
  let tuple = loop l Nil Nil in
  concat (concat (quicksort (proj(0) tuple)) (Cons {pivot,Nil})) (quicksort (proj(1) tuple))
in

quicksort (create_to 10 0)