(*
let rec x = (closure { val x = x | n => 
		ifz (n-1) then closure { val n = n | z => lookup n } 
		else closure { val x = lookup x val n = n | z => (apply (lookup x) (lookup n - 1)) } 
		}) 
in apply x 3
*)

let x = closure {  | a =>
 closure { val a = a | b =>
  closure { val a = lookup a val b = b | c =>
   let rec
    test = closure { val a = lookup a val b = lookup b val c = c | i =>
     lookup a + lookup b + lookup c }
    inapply (test) (0) } } } in 
apply (apply (apply (x) (1)) (2)) (3)
