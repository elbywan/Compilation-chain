
(** FUNS **)
fun `f20 (x1, size) = [ `f21, [ size ] ] 
fun `f21 (x1, a) = [ `f22, [ a, x1 [0] ] ] 
fun `f22 (x1, b) = 
let c = new ([  ], [ x1 [1], 0 ]) in 
  let x23 = [ x1 [0], x1 [1], b, c, 0 ] in 
  let aux = [ `f24, x23 ] in 
  let x27 = x23 [4] <- aux in
  aux [0] (aux [1], 0)
 
fun `f24 (x1, i) = 
  ifz (i) < (x1 [1]) then 
      [ `f25, [ x1 [3] ] ] 
  else [ `f26, [ x1 [0], i, x1 [2], x1 [3], x1 [4] ] ]
 
fun `f26 (x1, x4) = 
  let _chunk = x1 [3] [x1 [1]] <- (x1 [0] [x1 [1]]) * (x1 [2] [x1 [1]]) in 
  x1 [4] [0] (x1 [4] [1], (x1 [1]) + (1))
 
fun `f25 (x1, x5) = x1 [0] 
fun `f15 (x1, a) = [ `f16, [ x1 [0], a ] ] 
fun `f16 (x1, i) = [ `f17, [ x1 [0], x1 [1], i ] ] 
fun `f17 (x1, l) = 
      ifz ((0) - (l [0])) + (0) 
	  then [ `f18, [ x1 [1] ] ] 
 else ifz ((1) - (l [0])) + (0) 
	  then let x = l [1] in 
	       let xs = l [2] in 
	       [ `f2, [ `f19, [ x1 [0], x1 [1], x1 [2], x, xs ] ] ] 
 else 0
 
fun `f19 (x1, x11) = 
  let _chunk = x1 [1] [x1 [2]] <- x1 [3] in 
  x1 [0] [0] (x1 [0] [1], x1 [1]) [0] (x1 [0] [0] (x1 [0] [1], x1 [1]) [1], (x1 [2]) + (1)) [0] (x1 [0] [0] (x1 [0] [1], x1 [1]) [0] (x1 [0] [0] (x1 [0] [1], x1 [1]) [1], (x1 [2]) + (1)) [1], x1 [4])
fun `f18 (x1, x10) = x1 [0] fun `f2 (x1, x3) = x1 

(** BODY **)
let x14 = [ 0 ] in 
let init = [ `f15, x14 ] in 
let x28 = x14 [0] <- init in 
let products = [ `f20, [  ] ] in 
let a = 
init [0] (init [1], new ([  ], [ 3, 0 ])) [0] (init [0] (init [1], new ([ 
 ], [ 3, 0 ])) [1], 0) [0] (init [0] (init [1], new ([  ], [ 3, 0 ])) [0] (init [0] (init [1], new ([ 
 ], [ 3, 0 ])) [1], 0) [1], [ 1, 1, [ 1, 2, [ 1, 3, [ 0 ] ] ] ]) in 
let b = 
init [0] (init [1], new ([  ], [ 3, 0 ])) [0] (init [0] (init [1], new ([ 
 ], [ 3, 0 ])) [1], 0) [0] (init [0] (init [1], new ([  ], [ 3, 0 ])) [0] (init [0] (init [1], new ([ 
 ], [ 3, 0 ])) [1], 0) [1], [ 1, 3, [ 1, 2, [ 1, 1, [ 0 ] ] ] ]) in 
products [0] (products [1], 3) [0] (products [0] (products [1], 3) [1], a) [0] (products [0] (products [1], 3) [0] (products [0] (products [1], 3) [1], a) [1], b)
