(*
fun `f6 (x1, a) = [ `f7, [ a ] ] fun `f7 (x1, b) = [ `f8, [ x1 [0], b ] ] 
fun `f8 (x1, c) = 
let x9 = [ x1 [0], x1 [1], c ] in 
  let test = [ `f10, x9 ] in test [0] (test [1], 0)
 fun `f10 (x1, i) = ((x1 [0]) + (x1 [1])) + (x1 [2]) 
let x = [ `f6, [  ] ] in 
x [0] (x [1], 1) [0] (x [0] (x [1], 1) [1], 2) [0] (x [0] (x [1], 1) [0] (x [0] (x [1], 1) [1], 2) [1], 3)
*)
(*
fun `f6 (x1, x) = x 
let x = [ [ `f6, [  ] ], [ `f6, [  ] ] ] in 
let x = x [0] <- 1 in let y = 1 in x [y] [0] (x [y] [1], 2)
*)
(*
let x = [ 0, 1.1+.2.2 ] in let y = [ 1 ] in let z = [ 0, 6 ] in x
*)
(*
ifz (((0) - (l [0])) + (0))
	then 2
  else 1
*)
(*
fun `f (a,b) = 0
fun `f2 (a,b) = 1
let x = [1,1,[0,2]] in ifz (2)-(x[1]) 
			  then 1
		  else ifz (1)-(x[1]) 
			  then  [`f2,[]] 
		  else 3
*)
(*
fun `f11 (x1, a) = [ `f12, [ x1 [0], a ] ] 
fun `f12 (x1, i) = [ `f13, [ x1 [0], x1 [1], i ] ] 
fun `f13 (x1, l) = 
  ifz ((0) - (l [0])) + (0) 
    then [ `f14, [ x1 [1] ] ]
  else ifz ((1) - (l [0])) + (0) 
    then let x = l [1] in 
	 let xs = l [2] in [ `f15, [ x1 [0], x1 [1], x1 [2], x, xs ] ] 
  else 0
 
fun `f15 (x1, x7) = 
  let _chunk = x1 [1] [x1 [2]] <- x1 [3] in 
  x1 [0] [0] (x1 [0] [1], x1 [1]) [0] (x1 [0] [0] (x1 [0] [1], x1 [1]) [1], (x1 [2]) + (1)) [0] (x1 [0] [0] (x1 [0] [1], x1 [1]) [0] (x1 [0] [0] (x1 [0] [1], x1 [1]) [1], (x1 [2]) + (1)) [1], x1 [4])
 
fun `f14 (x1, x6) = x1 [0] 

let x10 = [ 0 ] in 
let init = [ `f11, x10 ] in 
let x16 = x10 [0] <- init in 
init [0] 
  (init [1], new ([  ], [ 3, 0 ]))[0] 
    (init [0] (init [1], new ([ ], [ 3, 0 ])) [1], 0)[0] 
      (init [0] (init [1], new ([ ], [ 3, 0 ]))[0] 
	(init [0] (init [1], new ([ ], [ 3, 0 ])) [1], 0) [1], [ 1, 1, [ 1, 2, [0] ] ])
 *)

fun `f9 (x1, a) = [ `f10, [ x1 [0], a ] ] 
fun `f10 (x1, b) = [ `f11, [ x1 [0], x1 [1], b ] ] 
fun `f11 (x1, c) = 
ifz c then [ `f12, [ x1 [1], x1 [2], c ] ] else [ `f13, 
                                                  [ x1 [0], x1 [1], x1 [2], c ] ]
 
fun `f13 (x1, x2) = 
x1 [0] [0] (x1 [0] [1], x1 [1]) [0] (x1 [0] [0] (x1 [0] [1], x1 [1]) [1], x1 [2]) [0] (x1 [0] [0] (x1 [0] [1], x1 [1]) [0] (x1 [0] [0] (x1 [0] [1], x1 [1]) [1], x1 [2]) [1], (x1 [3]) - (1))
 fun `f12 (x1, x3) = ((x1 [0]) + (x1 [1])) + (x1 [2]) 
let x8 = [ 0 ] in 
let testfun = [ `f9, x8 ] in 
let x14 = x8 [0] <- testfun in 
testfun [0] (testfun [1], 1) [0] (testfun [0] (testfun [1], 1) [1], 2) [0] (testfun [0] (testfun [1], 1) [0] (testfun [0] (testfun [1], 1) [1], 2) [1], 3)
