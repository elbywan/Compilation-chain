fun `f206 (x1, max) = 
let moy = (max) /. (2.) in 
  let newabr = 
  x1 [0] [0] (x1 [0] [1], [ 0 ]) [0] (x1 [0] [0] (x1 [0] [1], [ 0 ]) [1], moy) 
  in 
  let x207 = [ 0 ] in 
  let loop = [ `f208, x207 ] in 
  let x216 = x207 [0] <- loop in 
  loop [0] (loop [1], moy) [0] (loop [0] (loop [1], moy) [1], newabr) [0] (loop [0] (loop [1], moy) [0] (loop [0] (loop [1], moy) [1], newabr) [1], max)
 fun `f208 (x1, moy) = [ `f209, [ moy, x1 [0] ] ] 
fun `f209 (x1, a) = [ `f210, [ a, x1 [0], x1 [1] ] ] 
fun `f210 (x1, count) = 
ifz (1.) <. (count) then [ `f211, [ x1 [0] ] ] else [ `f212, 
                                                      [ x1 [0], x1 [1], 
                                                        x1 [2], count ] ]
 
fun `f212 (x1, x13) = 
ifz ((1) - (x1 [0] [0])) + (0) then let i = x1 [0] [1] in 
  [ `f215, [ i, x1 [1], x1 [2], x1 [3] ] ] else 0
 
fun `f215 (x1, x136) = 
let left = 
  x1 [2] [0] (x1 [2] [1], (x1 [1]) /. (2.)) [0] (x1 [2] [0] (x1 [2] [1], (x1 [1]) /. (2.)) [1], [ 
  1, (x1 [0]) -. ((x1 [1]) /. (2.)) ]) [0] (x1 [2] [0] (x1 [2] [1], (x1 [1]) /. (2.)) [0] (x1 [2] [0] (x1 [2] [1], (x1 [1]) /. (2.)) [1], [ 
  1, (x1 [0]) -. ((x1 [1]) /. (2.)) ]) [1], (x1 [3]) /. (2.)) in 
  let right = 
  x1 [2] [0] (x1 [2] [1], (x1 [1]) /. (2.)) [0] (x1 [2] [0] (x1 [2] [1], (x1 [1]) /. (2.)) [1], [ 
  1, (x1 [0]) +. ((x1 [1]) /. (2.)) ]) [0] (x1 [2] [0] (x1 [2] [1], (x1 [1]) /. (2.)) [0] (x1 [2] [0] (x1 [2] [1], (x1 [1]) /. (2.)) [1], [ 
  1, (x1 [0]) +. ((x1 [1]) /. (2.)) ]) [1], (x1 [3]) /. (2.)) in 
  [ 2, x1 [0], left, right ]
 fun `f213 (x1, x214) = x1 fun `f211 (x1, x14) = x1 [0] 
fun `f192 (x1, a) = [ `f193, [ a, x1 [0] ] ] 
fun `f193 (x1, elem) = 
ifz ((0) - (x1 [0] [0])) + (0) then [ `f196, [  ] ] else ifz ((1) - (x1 [0] [0])) + (0) then let i = 
  x1 [0] [1] in 
  [ `f194, [ `f197, [ i, elem ] ] ] else ifz ((2) - (x1 [0] [0])) + (0) then let i = 
  x1 [0] [1] in 
  let g = x1 [0] [2] in 
  let d = x1 [0] [3] in 
  [ `f194, [ `f194, [ `f200, [ i, g, d, x1 [1], elem ] ] ] ] else 0
 
fun `f200 (x1, x135) = 
ifz (x1 [0]) <. (x1 [4]) then [ `f201, [ x1 [1], x1 [3], x1 [4] ] ] else [ 
  `f202, [ x1 [0], x1 [2], x1 [3], x1 [4] ] ]
 
fun `f202 (x1, x11) = 
ifz (0.) <. ((x1 [0]) -. (x1 [3])) then [ `f203, [  ] ] else [ `f204, 
                                                               [ x1 [1], 
                                                                 x1 [2], 
                                                                 x1 [3] ] ]
 
fun `f204 (x1, x9) = 
x1 [1] [0] (x1 [1] [1], x1 [0]) [0] (x1 [1] [0] (x1 [1] [1], x1 [0]) [1], x1 [2])
 fun `f203 (x1, x10) = 1 
fun `f201 (x1, x12) = 
x1 [1] [0] (x1 [1] [1], x1 [0]) [0] (x1 [1] [0] (x1 [1] [1], x1 [0]) [1], x1 [2])
 
fun `f197 (x1, x134) = 
ifz (0.) <. ((x1 [0]) -. (x1 [1])) then [ `f198, [  ] ] else [ `f199, [  ] ] 
fun `f199 (x1, x7) = 0 fun `f198 (x1, x8) = 1 fun `f196 (x1, x133) = 0 
fun `f194 (x1, x195) = x1 fun `f180 (x1, a) = [ `f181, [ x1 [0], a ] ] 
fun `f181 (x1, nb) = 
ifz ((0) - (x1 [1] [0])) + (0) then [ `f184, [ nb ] ] else ifz ((1) - (x1 [1] [0])) + (0) then let i = 
  x1 [1] [1] in 
  [ `f182, [ `f185, [ nb, i ] ] ] else ifz ((2) - (x1 [1] [0])) + (0) then let i = 
  x1 [1] [1] in 
  let g = x1 [1] [2] in 
  let d = x1 [1] [3] in 
  [ `f182, [ `f182, [ `f188, [ x1 [0], nb, i, g, d ] ] ] ] else 0
 
fun `f188 (x1, x132) = 
ifz (x1 [2]) <. (x1 [1]) then [ `f189, 
                                [ x1 [0], x1 [1], x1 [2], x1 [3], x1 [4] ] ] else [ 
  `f190, [ x1 [0], x1 [1], x1 [2], x1 [3], x1 [4] ] ]
 
fun `f190 (x1, x5) = 
[ 2, x1 [2], x1 [3], 
  x1 [0] [0] (x1 [0] [1], x1 [4]) [0] (x1 [0] [0] (x1 [0] [1], x1 [4]) [1], x1 [1]) ]
 
fun `f189 (x1, x6) = 
[ 2, x1 [2], 
  x1 [0] [0] (x1 [0] [1], x1 [3]) [0] (x1 [0] [0] (x1 [0] [1], x1 [3]) [1], x1 [1]), 
  x1 [4] ]
 
fun `f185 (x1, x131) = 
ifz (x1 [1]) <. (x1 [0]) then [ `f186, [ x1 [0], x1 [1] ] ] else [ `f187, 
                                                                   [ 
                                                                   x1 [0], 
                                                                   x1 [1] ] ]
 fun `f187 (x1, x3) = [ 2, x1 [0], [ 1, x1 [1] ], [ 0 ] ] 
fun `f186 (x1, x4) = [ 2, x1 [0], [ 0 ], [ 1, x1 [1] ] ] 
fun `f184 (x1, x130) = [ 1, x1 [0] ] fun `f182 (x1, x183) = x1 
let x179 = [ 0 ] in 
let ajout = [ `f180, x179 ] in 
let x218 = x179 [0] <- ajout in 
let x191 = [ 0 ] in 
let isIn = [ `f192, x191 ] in 
let x217 = x191 [0] <- isIn in 
let x205 = [ ajout ] in 
let cree_arbre_equilibre = [ `f206, x205 ] in 
cree_arbre_equilibre [0] (cree_arbre_equilibre [1], 10.)