fun `f176 (x1, x) = [ `f177, [ x ] ] fun `f177 (x1, y) = (x1 [0]) + (y) 
fun `f175 (x1, x) = (x) + (1) fun `f166 (x1, l) = [ `f167, [ l ] ] 
fun `f167 (x1, funct) = [ `f168, [ x1 [0], funct ] ] 
fun `f168 (x1, accu) = 
let x169 = [ 0, x1 [1] ] in 
  let loop = [ `f170, x169 ] in 
  let x174 = x169 [0] <- loop in 
  loop [0] (loop [1], x1 [0]) [0] (loop [0] (loop [1], x1 [0]) [1], accu)
 fun `f170 (x1, l) = [ `f171, [ l, x1 [0], x1 [1] ] ] 
fun `f171 (x1, acc) = 
ifz ((0) - (x1 [0] [0])) + (0) then [ `f172, [ acc ] ] else ifz ((1) - (x1 [0] [0])) + (0) then let x = 
  x1 [0] [1] in 
  let xs = x1 [0] [2] in [ `f2, [ `f173, [ x, xs, x1 [1], x1 [2], acc ] ] ] else 0
 
fun `f173 (x1, x87) = 
x1 [2] [0] (x1 [2] [1], x1 [1]) [0] (x1 [2] [0] (x1 [2] [1], x1 [1]) [1], x1 [3] [0] (x1 [3] [1], x1 [0]) [0] (x1 [3] [0] (x1 [3] [1], x1 [0]) [1], x1 [4]))
 fun `f172 (x1, x86) = x1 [0] fun `f2 (x1, x3) = x1 
fun `f158 (x1, l) = [ `f159, [ l ] ] 
fun `f159 (x1, funct) = 
let x160 = [ 0, funct ] in 
  let loop = [ `f161, x160 ] in 
  let x164 = x160 [0] <- loop in loop [0] (loop [1], x1 [0])
 
fun `f161 (x1, l) = 
ifz ((0) - (l [0])) + (0) then [ `f162, [  ] ] else ifz ((1) - (l [0])) + (0) then let x = 
  l [1] in 
  let xs = l [2] in [ `f2, [ `f163, [ x, xs, x1 [0], x1 [1] ] ] ] else 0
 
fun `f163 (x1, x85) = 
[ 1, x1 [3] [0] (x1 [3] [1], x1 [0]), x1 [2] [0] (x1 [2] [1], x1 [1]) ] 
fun `f162 (x1, x84) = [ 0 ] fun `f2 (x1, x3) = x1 
fun `f150 (x1, first) = [ `f151, [ first ] ] 
fun `f151 (x1, last) = 
let x152 = [ last, 0 ] in 
  let loop = [ `f153, x152 ] in 
  let x156 = x152 [1] <- loop in loop [0] (loop [1], x1 [0])
 
fun `f153 (x1, i) = 
ifz ((x1 [0]) + (1)) - (i) then [ `f154, [  ] ] else [ `f155, [ x1 [1], i ] ]
 fun `f155 (x1, x4) = [ 1, x1 [1], x1 [0] [0] (x1 [0] [1], (x1 [1]) + (1)) ] 
fun `f154 (x1, x5) = [ 0 ] fun `f142 (x1, l) = [ `f143, [ l ] ] 
fun `f143 (x1, l2) = 
let x144 = [ 0, l2 ] in 
  let aux = [ `f145, x144 ] in 
  let x148 = x144 [0] <- aux in aux [0] (aux [1], x1 [0])
 
fun `f145 (x1, l) = 
ifz ((0) - (l [0])) + (0) then [ `f146, [ x1 [1] ] ] else ifz ((1) - (l [0])) + (0) then let x = 
  l [1] in let xs = l [2] in [ `f2, [ `f147, [ x1 [0], x, xs ] ] ] else 0
 fun `f147 (x1, x83) = [ 1, x1 [1], x1 [0] [0] (x1 [0] [1], x1 [2]) ] 
fun `f146 (x1, x82) = x1 [0] fun `f2 (x1, x3) = x1 
fun `f135 (x1, l) = 
let x136 = [ 0 ] in 
  let aux = [ `f137, x136 ] in 
  let x140 = x136 [0] <- aux in aux [0] (aux [1], l)
 
fun `f137 (x1, l) = 
ifz ((0) - (l [0])) + (0) then [ `f138, [  ] ] else ifz ((1) - (l [0])) + (0) then let x = 
  l [1] in let xs = l [2] in [ `f2, [ `f139, [ x1 [0], xs ] ] ] else 0
 fun `f139 (x1, x81) = (1) + (x1 [0] [0] (x1 [0] [1], x1 [1])) 
fun `f138 (x1, x80) = 0 fun `f2 (x1, x3) = x1 
let x134 = [  ] in 
let length = [ `f135, x134 ] in 
let x141 = [  ] in 
let concat = [ `f142, x141 ] in 
let x149 = [  ] in 
let create_from = [ `f150, x149 ] in 
let x157 = [  ] in 
let map = [ `f158, x157 ] in 
let x165 = [  ] in 
let fold_left = [ `f166, x165 ] in 
let list1 = 
create_from [0] (create_from [1], 5) [0] (create_from [0] (create_from [1], 5) [1], 10) 
in 
let list2 = 
create_from [0] (create_from [1], 15) [0] (create_from [0] (create_from [1], 15) [1], 20) 
in 
let list3 = 
map [0] (map [1], concat [0] (concat [1], list1) [0] (concat [0] (concat [1], list1) [1], list2)) [0] (map [0] (map [1], concat [0] (concat [1], list1) [0] (concat [0] (concat [1], list1) [1], list2)) [1], [ 
`f175, [  ] ]) in 
let sum = 
fold_left [0] (fold_left [1], create_from [0] (create_from [1], 0) [0] (create_from [0] (create_from [1], 0) [1], 5)) [0] (fold_left [0] (fold_left [1], create_from [0] (create_from [1], 0) [0] (create_from [0] (create_from [1], 0) [1], 5)) [1], [ 
`f176, [  ] ]) [0] (fold_left [0] (fold_left [1], create_from [0] (create_from [1], 0) [0] (create_from [0] (create_from [1], 0) [1], 5)) [0] (fold_left [0] (fold_left [1], create_from [0] (create_from [1], 0) [0] (create_from [0] (create_from [1], 0) [1], 5)) [1], [ 
`f176, [  ] ]) [1], 0) in (sum) + (length [0] (length [1], list1))